import react from '@vitejs/plugin-react'

import path from 'path'
import { defineConfig } from 'vite'
import viteTsConfigPaths from 'vite-tsconfig-paths'

export default defineConfig(() => {
  return {
    /*
     * Base public path when served in development or production.
     */
    base: '/',
    build: {
      outDir: path.resolve(__dirname, '../../dist'),
    },
    /*
     * Directory to save cache files.
     * Files in this directory are pre-bundled deps or some other cache files generated by vite,
     * which can improve the performance. You can use --force flag or manually delete the directory to regenerate the cache files.
     * The value can be either an absolute file system path or a path relative to project root.
     * @Default: "node_modules/.vite"
     */
    cacheDir: 'node_modules/.vite',
    /*
     * Define global constant replacements.
     */
    define: {
      'process.env': {},
    },
    /* Specifying this in config will override the default mode for both serve and build.
     * This value can also be overridden via the command line --mode option.
     * @Default: 'development' for serve, 'production' for build.
     */
    // mode: 'development',
    /*
     * Array of plugins to use.
     * Falsy plugins are ignored and arrays of plugins are flattened.
     * If a promise is returned, it would be resolved before running.
     * Read more: https://vitejs.dev/guide/api-plugin.html
     */
    plugins: [
      react({
        // Use React plugin in all *.jsx and *.tsx files
        include: '**/*.{jsx,tsx}',
      }),
      viteTsConfigPaths({
        // The directory to search for tsconfig.json files
        root: path.resolve(__dirname, '../../'),
      }),
    ],
    preview: {
      port: 4000,
    },
    /*
     * Directory to serve as plain static assets.
     * Files in this directory are served at '/' during dev and copied to the root of outDir during build,
     * and are always served or copied as-is without transform.
     * The value can be either an absolute file system path or a path relative to project root.
     * Defining publicDir as false disables this feature.
     */
    publicDir: path.resolve(__dirname, '../../public'),
    resolve: {
      alias: {
        '@': path.resolve(__dirname, '../../src'),
      },
    },
    /*
     * Project root directory (where index.html is located)
     */
    root: path.resolve(__dirname, '../../src'),
    server: {
      port: 3000,
    },
  }
})
